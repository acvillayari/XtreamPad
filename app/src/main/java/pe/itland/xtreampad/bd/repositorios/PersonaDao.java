package pe.itland.xtreampad.bd.repositorios;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import pe.itland.xtreampad.bd.modelo.Persona;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "persona".
*/
public class PersonaDao extends AbstractDao<Persona, Long> {

    public static final String TABLENAME = "persona";

    /**
     * Properties of entity Persona.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdPersona = new Property(0, Long.class, "idPersona", true, "_id");
        public final static Property Nombres = new Property(1, String.class, "nombres", false, "nombres");
        public final static Property Edad = new Property(2, int.class, "edad", false, "edad");
    }


    public PersonaDao(DaoConfig config) {
        super(config);
    }
    
    public PersonaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"persona\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idPersona
                "\"nombres\" TEXT," + // 1: nombres
                "\"edad\" INTEGER NOT NULL );"); // 2: edad
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"persona\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Persona entity) {
        stmt.clearBindings();
 
        Long idPersona = entity.getIdPersona();
        if (idPersona != null) {
            stmt.bindLong(1, idPersona);
        }
 
        String nombres = entity.getNombres();
        if (nombres != null) {
            stmt.bindString(2, nombres);
        }
        stmt.bindLong(3, entity.getEdad());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Persona entity) {
        stmt.clearBindings();
 
        Long idPersona = entity.getIdPersona();
        if (idPersona != null) {
            stmt.bindLong(1, idPersona);
        }
 
        String nombres = entity.getNombres();
        if (nombres != null) {
            stmt.bindString(2, nombres);
        }
        stmt.bindLong(3, entity.getEdad());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Persona readEntity(Cursor cursor, int offset) {
        Persona entity = new Persona( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idPersona
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombres
            cursor.getInt(offset + 2) // edad
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Persona entity, int offset) {
        entity.setIdPersona(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombres(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEdad(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Persona entity, long rowId) {
        entity.setIdPersona(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Persona entity) {
        if(entity != null) {
            return entity.getIdPersona();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Persona entity) {
        return entity.getIdPersona() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
