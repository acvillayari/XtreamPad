package pe.itland.xtreampad.bd.repositorios;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import pe.itland.xtreampad.bd.modelo.Home_Principal;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Home_Principal".
*/
public class Home_PrincipalDao extends AbstractDao<Home_Principal, Long> {

    public static final String TABLENAME = "Home_Principal";

    /**
     * Properties of entity Home_Principal.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Home_principal_id = new Property(0, Long.class, "home_principal_id", true, "home_principal_id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Image_principal = new Property(2, String.class, "image_principal", false, "image_principal");
        public final static Property Logo_cliente = new Property(3, String.class, "logo_cliente", false, "logo_cliente");
        public final static Property Logo_proveedor = new Property(4, String.class, "logo_proveedor", false, "logo_proveedor");
        public final static Property Deleted = new Property(5, boolean.class, "deleted", false, "deleted");
        public final static Property Insert_date = new Property(6, java.util.Date.class, "insert_date", false, "insert_date");
        public final static Property Insert_user = new Property(7, int.class, "insert_user", false, "insert_user");
        public final static Property Update_date = new Property(8, java.util.Date.class, "update_date", false, "update_date");
        public final static Property Update_user = new Property(9, int.class, "update_user", false, "update_user");
    }


    public Home_PrincipalDao(DaoConfig config) {
        super(config);
    }
    
    public Home_PrincipalDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Home_Principal\" (" + //
                "\"home_principal_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: home_principal_id
                "\"name\" TEXT," + // 1: name
                "\"image_principal\" TEXT," + // 2: image_principal
                "\"logo_cliente\" TEXT," + // 3: logo_cliente
                "\"logo_proveedor\" TEXT," + // 4: logo_proveedor
                "\"deleted\" INTEGER NOT NULL ," + // 5: deleted
                "\"insert_date\" INTEGER," + // 6: insert_date
                "\"insert_user\" INTEGER NOT NULL ," + // 7: insert_user
                "\"update_date\" INTEGER," + // 8: update_date
                "\"update_user\" INTEGER NOT NULL );"); // 9: update_user
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Home_Principal\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Home_Principal entity) {
        stmt.clearBindings();
 
        Long home_principal_id = entity.getHome_principal_id();
        if (home_principal_id != null) {
            stmt.bindLong(1, home_principal_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image_principal = entity.getImage_principal();
        if (image_principal != null) {
            stmt.bindString(3, image_principal);
        }
 
        String logo_cliente = entity.getLogo_cliente();
        if (logo_cliente != null) {
            stmt.bindString(4, logo_cliente);
        }
 
        String logo_proveedor = entity.getLogo_proveedor();
        if (logo_proveedor != null) {
            stmt.bindString(5, logo_proveedor);
        }
        stmt.bindLong(6, entity.getDeleted() ? 1L: 0L);
 
        java.util.Date insert_date = entity.getInsert_date();
        if (insert_date != null) {
            stmt.bindLong(7, insert_date.getTime());
        }
        stmt.bindLong(8, entity.getInsert_user());
 
        java.util.Date update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindLong(9, update_date.getTime());
        }
        stmt.bindLong(10, entity.getUpdate_user());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Home_Principal entity) {
        stmt.clearBindings();
 
        Long home_principal_id = entity.getHome_principal_id();
        if (home_principal_id != null) {
            stmt.bindLong(1, home_principal_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String image_principal = entity.getImage_principal();
        if (image_principal != null) {
            stmt.bindString(3, image_principal);
        }
 
        String logo_cliente = entity.getLogo_cliente();
        if (logo_cliente != null) {
            stmt.bindString(4, logo_cliente);
        }
 
        String logo_proveedor = entity.getLogo_proveedor();
        if (logo_proveedor != null) {
            stmt.bindString(5, logo_proveedor);
        }
        stmt.bindLong(6, entity.getDeleted() ? 1L: 0L);
 
        java.util.Date insert_date = entity.getInsert_date();
        if (insert_date != null) {
            stmt.bindLong(7, insert_date.getTime());
        }
        stmt.bindLong(8, entity.getInsert_user());
 
        java.util.Date update_date = entity.getUpdate_date();
        if (update_date != null) {
            stmt.bindLong(9, update_date.getTime());
        }
        stmt.bindLong(10, entity.getUpdate_user());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Home_Principal readEntity(Cursor cursor, int offset) {
        Home_Principal entity = new Home_Principal( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // home_principal_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image_principal
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logo_cliente
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // logo_proveedor
            cursor.getShort(offset + 5) != 0, // deleted
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // insert_date
            cursor.getInt(offset + 7), // insert_user
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // update_date
            cursor.getInt(offset + 9) // update_user
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Home_Principal entity, int offset) {
        entity.setHome_principal_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage_principal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogo_cliente(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLogo_proveedor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeleted(cursor.getShort(offset + 5) != 0);
        entity.setInsert_date(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setInsert_user(cursor.getInt(offset + 7));
        entity.setUpdate_date(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUpdate_user(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Home_Principal entity, long rowId) {
        entity.setHome_principal_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Home_Principal entity) {
        if(entity != null) {
            return entity.getHome_principal_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Home_Principal entity) {
        return entity.getHome_principal_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
