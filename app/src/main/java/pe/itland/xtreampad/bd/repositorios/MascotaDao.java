package pe.itland.xtreampad.bd.repositorios;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import pe.itland.xtreampad.bd.modelo.Mascota;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "mascota".
*/
public class MascotaDao extends AbstractDao<Mascota, Long> {

    public static final String TABLENAME = "mascota";

    /**
     * Properties of entity Mascota.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdMascota = new Property(0, Long.class, "idMascota", true, "_id");
        public final static Property Apodo = new Property(1, String.class, "apodo", false, "apodo");
        public final static Property Edad = new Property(2, int.class, "edad", false, "edad");
    }


    public MascotaDao(DaoConfig config) {
        super(config);
    }
    
    public MascotaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"mascota\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idMascota
                "\"apodo\" TEXT," + // 1: apodo
                "\"edad\" INTEGER NOT NULL );"); // 2: edad
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"mascota\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Mascota entity) {
        stmt.clearBindings();
 
        Long idMascota = entity.getIdMascota();
        if (idMascota != null) {
            stmt.bindLong(1, idMascota);
        }
 
        String apodo = entity.getApodo();
        if (apodo != null) {
            stmt.bindString(2, apodo);
        }
        stmt.bindLong(3, entity.getEdad());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Mascota entity) {
        stmt.clearBindings();
 
        Long idMascota = entity.getIdMascota();
        if (idMascota != null) {
            stmt.bindLong(1, idMascota);
        }
 
        String apodo = entity.getApodo();
        if (apodo != null) {
            stmt.bindString(2, apodo);
        }
        stmt.bindLong(3, entity.getEdad());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Mascota readEntity(Cursor cursor, int offset) {
        Mascota entity = new Mascota( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idMascota
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // apodo
            cursor.getInt(offset + 2) // edad
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Mascota entity, int offset) {
        entity.setIdMascota(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setApodo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEdad(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Mascota entity, long rowId) {
        entity.setIdMascota(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Mascota entity) {
        if(entity != null) {
            return entity.getIdMascota();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Mascota entity) {
        return entity.getIdMascota() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
